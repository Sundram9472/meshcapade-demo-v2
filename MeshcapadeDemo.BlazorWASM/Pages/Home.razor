@page "/Home"
<PageTitle>Home</PageTitle>
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Forms
@using Newtonsoft.Json
@using System.Text
@using System.Net.Http.Headers
@inject ILocalStorageService _localstorage

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />
<InputFile accept=".jpg,.jpeg,.png,.gif,.mp4,.avi,.mov,.mkv,.obj" OnChange="@(async e => await HandleFileSelected(e))" class="cus-input" />


@if (isButtonShow)
{
    <div class="action-btn">
        <button type="button" class="btn btn-primary btn-lg" @onclick="Download">
            <span>
                Download
                <img src="/img/down-load.svg" />
            </span>

        </button>
        <button type="button" class="btn btn-secondary btn-lg" @onclick="GetMeasurement">
            <span>
                Measurement
                <img src="/img/rulers.svg" />
            </span>
        </button>
    </div>
}

@if (isLoaderActive)
{
    <div class="loader"></div>
}

@if (showMeasurementData)
{
    <div class="card cus-card">
        <h5 class="card-header">Measurement</h5>
        <div class="card-body">
            <div class="measurement-data">
                <div class="shape">
                    <h4>Shape <img src="/Img/exclamation-circle.svg" /></h4>
                    <p>@BodyShapevalue</p>
                </div>

                <div class="units">
                    <h4>Units <img src="/Img/eye.svg" /></h4>
                    <p>@unitsvalue</p>
                </div>

                <div class="height">
                    <h4>Height (cm) <img src="/Img/eye.svg" /></h4>
                    <p class="measurement-data-inner">@Height</p>
                </div>

                <div class="weight">
                    <h4>Weight (kg) <img src="/Img/eye.svg" /></h4>
                    <p class="measurement-data-inner">@Weight</p>
                </div>

                <div class="chest">
                    <h4>Chest (cm) <img src="/Img/eye.svg" /></h4>
                    <p class="measurement-data-inner">@chest</p>
                </div>

                <div class="waist">
                    <h4>Waist (cm) <img src="/Img/eye.svg"></h4>
                    <p class="measurement-data-inner">@waist</p>
                </div>

                <div class="hips">
                    <h4>Hips (cm) <img src="/Img/eye.svg" /></h4>
                    <p class="measurement-data-inner">@hips</p>
                </div>

                <div class="inseam">
                    <h4>Inseam (cm) <img src="/Img/eye.svg" /></h4>
                    <p class="measurement-data-inner">@inseam</p>
                </div>
            </div>
        </div>
    </div>
}

<canvas id="threeCanvas" style="width: 100%; height: 100%;"></canvas>

@code {
    private string? BodyShapevalue { get; set; }
    private string? unitsvalue { get; set; }
    public double inseam { get; set; }
    public double hips { get; set; }
    public double waist { get; set; }
    public double chest { get; set; }
    public double Weight { get; set; }
    public double Height { get; set; }
    private string? assetId;
    private string? _s3Url;
    private bool uploadimages3;
    public AvatarMeasurements? responseAvatar;
    public AvatarExport? responseAvatarExport;
    private bool isLoaderActive = false;
    private bool isButtonShow = false;
    private bool showMeasurementData = false;
    List<ToastMessage> messages = new List<ToastMessage>();
    private string extension;
    private bool uploadvideos3;
    private string _mediaType;
    private string? token;

    private void ShowMessage(ToastType toastType, string message, string title) => messages.Add(CreateToastMessage(toastType, message, title));

    private ToastMessage CreateToastMessage(ToastType toastType, string message, string title)
    => new ToastMessage
    {
        Type = toastType,
        Title = title,
        Message = message,
    };

    protected override async Task OnInitializedAsync()
    {
        var isSuccess = await _localstorage.GetItemAsStringAsync("IsLoginSuccess");
        token = await _localstorage.GetItemAsStringAsync("token");
        if (isSuccess == "false")
        {
            ShowMessage(ToastType.Danger, " ", "UnAuthorize");
            System.Threading.Thread.Sleep(10000);
            Navigation.NavigateTo("/");
        }
       
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        const long maxAllowedSize = 20 * 1024 * 1024; // 20 MB
        var file = e.File;
        extension = Path.GetExtension(file.Name);
        if (file.Size > maxAllowedSize)
        {
            ShowMessage(ToastType.Danger, "File too large to upload.!", "Status");
            return;
        }
        else
        {
            isLoaderActive = true;
            isButtonShow = false;
            showMeasurementData = false;

            switch (extension)
            {
                case ".jpg":
                case ".jpeg":
                case ".png":
                case ".gif":
                    _mediaType = "images";
                    break;

                case ".mp4":
                case ".avi":
                case ".mov":
                case ".mkv":
                    _mediaType = "video";
                    break;

                case ".obj":
                    _mediaType = "scans";
                    break;

                default:
                    _mediaType = string.Empty;
                    break;

            }

            if (string.IsNullOrEmpty(_mediaType))
            {
                ShowMessage(ToastType.Danger, "file is not supported.!", "Status");
                return;
            }

            using var content = new MultipartFormDataContent();
            content.Add(new StringContent(token), "token");
            content.Add(new StringContent(_mediaType), "mediaType");

            var fileContent = new StreamContent(e.File.OpenReadStream()); // Adjust the maxAllowedSize as needed
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(e.File.ContentType);
            content.Add(fileContent, "uploadedFile", e.File.Name);

            var response = await Http.PostAsync("api/CreateAvatar", content);


            if (response.IsSuccessStatusCode)
            {
                var AssetId = await response.Content.ReadAsStringAsync();
                await _localstorage.SetItemAsync("AssetId", AssetId);
                isLoaderActive = false;
                isButtonShow = true;
                ShowMessage(ToastType.Success, "Avatar Created succesfully !", "Avatar created");
            }
            else
            {
                isLoaderActive = false;
                ShowMessage(ToastType.Danger, "File upload to s3 bucket for avatar creation Faield !", "File Process For Avatar");
            }


        }

    }

    private double DoubleFormatter(double value)
    {
        var result = Math.Round(value, 2);
        return result;
    }


    private async Task GetMeasurement()
    {
        var request = new
        {
            token = await _localstorage.GetItemAsStringAsync("token"),
            assetId = await _localstorage.GetItemAsStringAsync("AssetId")

        };
        var content = new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, "application/json");
        isLoaderActive = true;
        var response = await Http.PostAsync("api/GetAvatar", content);
        if (response.IsSuccessStatusCode)
        {
            var apiResponse = await response.Content.ReadFromJsonAsync<AvatarMeasurements>();
            if (apiResponse.data.attributes.state == "READY")
            {
                ShowMessage(ToastType.Success, "Avatar measrements !", "Status");
                Weight = DoubleFormatter(apiResponse.data.attributes.metadata.bodyShape.mesh_measurements.Weight);
                Height = DoubleFormatter(apiResponse.data.attributes.metadata.bodyShape.mesh_measurements.Height);
                BodyShapevalue = apiResponse.data.attributes.metadata.bodyShape.gender;
                unitsvalue = "METRIC";
                isLoaderActive = false;
                showMeasurementData = true;
            }
            else
            {
                isLoaderActive = false;
                ShowMessage(ToastType.Info, "Avatar is not in ready state. Please wait.!", "Status");
            }
        }
        else
        {
            isLoaderActive = false;
            ShowMessage(ToastType.Info, "Avatar is not in ready state. Please wait.!", "Status");
        }
    }

    private async Task Download()
    {
        var request = new
        {
            token = await _localstorage.GetItemAsStringAsync("token"),
            assetId = await _localstorage.GetItemAsStringAsync("AssetId")

        };
        var content = new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, "application/json");
        isLoaderActive = true;
        var response = await Http.PostAsync("api/ExportAvatar", content);
        if(response.IsSuccessStatusCode)
        {
            var apiResponse = await response.Content.ReadFromJsonAsync<AvatarExport>();
            if(apiResponse.data.attributes.state == "READY")
            {
                var s3BucketFileLink = apiResponse.data.attributes.url.path.ToString();
                await JSRuntime.InvokeVoidAsync("threeExample", "threeCanvas", s3BucketFileLink);
                Navigation.NavigateTo(apiResponse.data.attributes.url.path, true);
                isLoaderActive = false;
            }
            else
            {
                isLoaderActive = false;
                ShowMessage(ToastType.Info, "Avatar is not in ready state. Please wait sometime for download.!", "Status");
            }
        }
        else
        {
            isLoaderActive = false;
            ShowMessage(ToastType.Info, "Avatar is not in ready state. Please wait sometime for download.!", "Status");
        }
    }
}